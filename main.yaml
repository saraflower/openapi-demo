openapi: 3.0.3


info:
  title: 'Test'
  description: This is a sample description
  termsOfService: https://example.com
  version: '1.0'
  license:
    name: Fictional license
    url: https://example.com
  contact:
    email: fakeemail@provider.com
    name: saraflower
    url: https://example.com


servers:
- url: https://qa.example.com
  description: QA Example server
- url: https://prod.example.com
  description: Prod Example server


paths:
  /v1/customers:
    get:
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: List of Customers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerPagedList"


  /v1/drinks:
    get:
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageNumber'
      responses:
        '200':
          description: List of Drinks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DrinkPagedList"
        '404':
          description: Not found


components:
  parameters:
    pageSize:
      name: pageSize
      in: query
      required: false
      schema:
        type: integer
        format: int32
        default: 25
    pageNumber:
      name: pageNumber
      in: query
      required: false
      schema:
        type: integer
        format: int32
        default: 1
  schemas:
    Address:
      type: object
      description: Address Object
      properties:
        line1:
          type: string
          example: Street 123-5
        city:
          type: string
          example: Valencia
        zipCode:
          type: string
          example: 55555
        province:
          type: string
          enum: [VAL, BCN, MAD]
        community:
          type: string
          enum:
            - Comunitat Valenciana
            - Barcelona
            - Madrid

    User:
      type: object
      description: base user
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string

    Customer:
      type: object
      description: Customer Object
      allOf:
        - $ref: '#/components/schemas/User'
      properties:
        firstName:
          type: string
          minLength: 2
          maxLength: 100
          example: Sara
        lastName:
          type: string
          minLength: 2
          maxLength: 100
          example: Flower
        address:
          $ref: "#/components/schemas/Address"

    CustomerList:
      type: array
      items:
        $ref: "#/components/schemas/Customer"

    CustomerPagedList:
      type: object
      allOf:
        - $ref: ./PagedResponse/PagedResponse.yaml
      properties:
        content:
          $ref: '#/components/schemas/CustomerList'

    DrinkPagedList:
      type: object
      allOf:
        - $ref: ./PagedResponse/PagedResponse.yaml
      properties:
        content:
          $ref: DrinkList.yaml
